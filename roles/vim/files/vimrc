"### Base ###
scriptencoding utf-8
filetype detect
syntax on

colorscheme delek

set number
set ruler
set nocompatible

" tmp files
set backup
set backupdir=~/.vim-tmp

set undofile
set undodir=~/.vim-tmp

set swapfile
set directory=~/.vim-tmp

" search
set incsearch
set hlsearch
set showmatch

" white characters
set list
set listchars=eol:$,tab:>\ ,extends:<
highlight JpSpace cterm=underline ctermfg=Blue guifg=Blue
autocmd BufRead,BufNew * match JpSpace /ã€€/

" indent
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent

" disable cusor key
nnoremap <Up> <NOP>
nnoremap <Down> <NOP>
nnoremap <Left> <NOP>
nnoremap <Right> <NOP>

inoremap <Up> <NOP>
inoremap <Down> <NOP>
inoremap <Left> <NOP>
inoremap <Right> <NOP>

" keep indent of blank line
nnoremap o oX<C-h>
nnoremap O OX<C-h>
inoremap <CR> <CR>X<C-h>



"### NeoBundle ###
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
  call neobundle#rc(expand('~/.vim/bundle/'))
endif

" Input completion
NeoBundle 'Shougo/neocomplete.vim'

" Shell
NeoBundle 'Shougo/vimshell.vim'
NeoBundle 'Shougo/vimproc.vim', {
\  'build': {
\    'windows': 'make -f make_mingw32.mak',
\    'cygwin': 'make -f make_cygwin.mak',
\    'mac': 'make -f make_mac.mak',
\    'unix': 'make -f make_unix.mak',
\  },
\}

" Virtual Caps Lock
NeoBundle 'tpope/vim-capslock'

" File selector
NeoBundle 'kien/ctrlp.vim'

" Comment out
NeoBundle 'tyru/caw.vim'

" Show indent line
NeoBundle 'Yggdroot/indentLine'

" Wandbox
NeoBundle 'rhysd/wandbox-vim'

" C++ Syntax
NeoBundleLazy 'vim-jp/cpp-vim', {
\  'autoload': {'filetypes': 'cpp'}
\}

" C++ Input completion (use Clang)
NeoBundleLazy 'osyo-manga/vim-marching', {
\  'autoload': {'filetypes': 'cpp'}
\}



"### NeoComplete.vim ###
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_ignore_case = 1
let g:neocomplete#enable_smart_case = 1
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns._ = '\h\w*'

inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"



"### Capslock.vim ###
imap <C-a> <C-O><Plug>CapsLockToggle



"### Caw.vim
nmap \c <Plug>(caw:I:toggle)
vmap \c <Plug>(caw:I:toggle)

nmap \C <Plug>(caw:I:uncomment)
vmap \C <Plug>(caw:I:uncomment)



"### IndentLine
let g:indentLine_showFirstIndentLevel = 1



"### Marching.vim
let s:hooks = neobundle#get_hooks('vim-marching')
function! s:hooks.on_post_source(bundle)
  if !empty(g:marching_clang_command) && executable(g:marching_clang_command)
    let g:marching_backend = 'sync_clang_command'
  else
    let g:marching_backend = 'wandbox'
    let g:marching_clang_command = ''
  endif
  
  let g:marching#clang_command#options = {
  \  'cpp': '-std=gnu++1y'
  \}
  
  if !neobundle#is_sourced('neocomplete.vim')
    return
  endif
  
  let g:marching_enable_neocomplete = 1
  
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  
  let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
endfunction
unlet s:hooks



"### FileType settings
" C++
let $CPP_STDLIB = '/usr/include/c++/4.2.1'

function! s:cpp()
  setlocal path+=/usr/include,$CPP_STDLIB,/usr/local/include
  
  setlocal tabstop=4
  setlocal shiftwidth=4
  setlocal softtabstop=4
  
  setlocal matchpairs+=<:>
  
  syntax match boost_pp /BOOST_PP_[A-z0-9_]*/
  highlight link boost_pp cppStatement
endfunction

augroup vimrc-cpp
  autocmd!
  autocmd BufReadPost $CPP_STDLIB/* if empty(&filetype) | set filetype=cpp | endif
  autocmd FileType cpp call s:cpp()
augroup END


" Makefile
function! s:makefile()
  setlocal noexpandtab
endfunction

augroup vimrc-makefile
  autocmd!
  autocmd FileType makefile call s:makefile()
augroup END
